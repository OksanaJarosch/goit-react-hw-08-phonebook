{"version":3,"file":"static/js/991.670f4f8e.chunk.js","mappings":"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","sources":["components/RegisterForm/RegisterForm.jsx","pages/RegistrationPage.js"],"sourcesContent":["import * as Yup from 'yup';\nimport {\n    Box,\n    Button,\n    Flex,\n    FormControl,\n    FormErrorMessage,\n    FormLabel,\n    Input,\n    Text,\n    VStack\n} from \"@chakra-ui/react\";\nimport { useFormik } from \"formik\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { registration } from 'redux/authorization/authOperations';\nimport { useEffect } from 'react';\nimport { resetError } from 'redux/authorization/authSlice';\nimport { selectIsError } from 'redux/authorization/authSelectors';\nimport toast from 'react-hot-toast';\n\n\nconst schema = Yup.object().shape({\n    name: Yup.string().min(3, \"Too short\").required('Required'),\n    email: Yup.string().email().required('Required'),\n    password: Yup.string().min(7, \"Too short\").required('Required'),\n});\n\n\nexport const RegisterForm = () => {\n\n    const dispatch = useDispatch();\n    const isError = useSelector(selectIsError);\n\n    const formik = useFormik({\n        initialValues: {\n            name: '',\n            email: '',\n            password: '',\n        },\n        validationSchema: schema,\n        onSubmit: (values) => {  \n            dispatch(registration(values))          \n            }}\n    )\n\n    useEffect(() => {\n    if (isError) {\n        toast.error('Your email is invalid or already registered')\n        dispatch(resetError());\n    }\n    }, [isError, dispatch]);\n\n    return (\n        <Flex bg=\"gray.100\" align=\"center\" justify=\"center\" marginTop=\"10%\">\n            <Box bg=\"white\" p={8} rounded=\"md\">\n                <form onSubmit={formik.handleSubmit}>\n                    <VStack spacing={4} align=\"flex-start\">\n                    <Text fontSize=\"2xl\" fontWeight=\"bold\" marginRight=\"auto\" marginLeft=\"auto\">Create Account</Text>\n                        <FormControl isInvalid={formik.touched.name && formik.errors.name}>\n                            <FormLabel htmlFor=\"name\">Your Name</FormLabel>\n                            <Input\n                                name=\"name\"\n                                id=\"name\"\n                                type=\"name\"\n                                variant=\"outline\"\n                                onChange={formik.handleChange}\n                                value={formik.values.name}\n                                onBlur={formik.handleBlur}\n                            />\n                            <FormErrorMessage>{formik.errors.name}</FormErrorMessage>\n                        </FormControl>\n                        <FormControl isInvalid={formik.touched.email && formik.errors.email}>\n                            <FormLabel htmlFor=\"email\">Email Address</FormLabel>\n                            <Input\n                                name=\"email\"\n                                id=\"email\"\n                                type=\"email\"\n                                variant=\"outline\"\n                                onChange={formik.handleChange}\n                                value={formik.values.email}\n                                onBlur={formik.handleBlur}\n                            />\n                            <FormErrorMessage>{formik.errors.email}</FormErrorMessage>\n                        </FormControl>\n                        <FormControl isInvalid={formik.touched.password && formik.errors.password}>\n                            <FormLabel htmlFor=\"password\">Password</FormLabel>\n                            <Input\n                                id=\"password\"\n                                name=\"password\"\n                                type=\"password\"\n                                variant=\"outline\"\n                                onChange={formik.handleChange}\n                                value={formik.values.password}\n                                onBlur={formik.handleBlur}\n                            />\n                            <FormErrorMessage>{formik.errors.password}</FormErrorMessage>\n                        </FormControl>\n                        <Button type=\"submit\" colorScheme=\"purple\" width=\"full\" marginTop=\"4\">\n                            Sign Up\n                        </Button>\n                    </VStack>\n                </form>\n            </Box>\n        </Flex>\n    );\n    }","import { RegisterForm } from \"components/RegisterForm/RegisterForm\";\n\n\nexport default function LoginPage () {\n\n    return (\n        <>\n        <RegisterForm/>\n        </>\n    )\n}"],"names":["schema","Yup","shape","name","min","required","email","password","RegisterForm","dispatch","useDispatch","isError","useSelector","selectIsError","formik","useFormik","initialValues","validationSchema","onSubmit","values","registration","useEffect","toast","resetError","_jsx","Flex","bg","align","justify","marginTop","children","Box","p","rounded","handleSubmit","_jsxs","VStack","spacing","Text","fontSize","fontWeight","marginRight","marginLeft","FormControl","isInvalid","touched","errors","FormLabel","htmlFor","Input","id","type","variant","onChange","handleChange","value","onBlur","handleBlur","FormErrorMessage","Button","colorScheme","width","LoginPage","_Fragment"],"sourceRoot":""}